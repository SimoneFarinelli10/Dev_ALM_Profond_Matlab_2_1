function outputs = calcPensionFund(assetScenarioFileName,...
                                   liabilityScenarioFileName,...
                                   correlationFileName,...
                                   controlScenarioFileName,...
                                   varInputsStruct0)
                                
 %variable inputs definition
 display('Preparing names of output files...');
 
 varInputsStructFieldNames = {'quantDKPlotJpgFileName',... 
            'DKCsvFileName',... 
            'quantCFPlotJpgFileName',... 
            'CFCsvFileName',...
		    'inForceCumTotalRetDistJpgFileName',... 
            'inForceCumTotalRetQuantJpgFileName',...  
            'inForceCumTotalRetCsvFileName',... 
            'inForceTotalRetDistJpgFileName',... 
            'inForceTotalRetQuantJpgFileName',...  
            'inForceTotalRetCsvFileName',...  
            'inForceRfrDistJpgFileName',...  
            'inForceRfrQuantJpgFileName',... 
            'inForceRfrCsvFileName',... 
		    'inForceAlloAssetJpgFileName',...  
            'inForceAlloAssetCsvFileName',... 
		    'altCumTotalRetDistJpgFileName',...  
            'altCumTotalRetQuantJpgFileName',...  
            'altCumTotalRetCsvFileName',...  
            'altTotalRetDistJpgFileName',...  
            'altTotalRetQuantJpgFileName',...  
            'altTotalRetCsvFileName',...  
            'altRfrDistJpgFileName',...  
            'altRfrQuantJpgFileName',...  
            'altRfrCsvFileName',...  
		    'altProbJpgFileName',...  
            'altProbCsvFileName',...   
            'effFrontJpgFileName',...  
            'optPortCsvFileName',...
            'inForceTargetReserveCsvFileName',... 
            'inForceCumulatedTargetReserveCsvFileName',... 
		    'initialReportedFundingRatioCsvFileName',... 
		    'inForceAssCfCsvFileName',...  
            'altAssCfCsvFileName',... 
		    'iCfCsvFileName',...  
            'nICfCsvFileName',...
            'altAlloAssetCsvFileName',...
            'altAlloAssetJpgFileName',...
            'altTargetReserveCsvFileName',...
            'altCumulatedTargetReserveCsvFileName',...
            'inForceProbCsvFileName',...
            'inForceProbJpgFileName',...
            'inForceBsCsvFileName',...
            'inForceBsJpgFileName',... 
            'altBsCsvFileName',...
            'altBsJpgFileName',... 
            };
 
        
 %default values for varInputsStruct
 numOfFields = length(varInputsStructFieldNames);
 for num=1:numOfFields
     varInputsStruct.(varInputsStructFieldNames{num}) = string.empty(0,0);
 end    
 
 fieldNames0 = fieldnames(varInputsStruct0);
 numOfFields0 = length(fieldNames0);
 for num=1:numOfFields0
     varInputsStruct.(fieldNames0{num}) = varInputsStruct0.(fieldNames0{num});
 end
 
 display('Reading in input files and creating objects...');
 
 tic;
 
 pfp = createPensionFundProjection(assetScenarioFileName, liabilityScenarioFileName, correlationFileName); 
 [projectionFlag, numSim, horProj, fLevelsShortfall, fLevelRes, alphaRes, optimizationFlag, horOpt, numOpt, retRangeOpt, fLevelOpt] = createPensionFundControl(controlScenarioFileName);
 toc;
 
 fLevelsShortfall = flip(fLevelsShortfall);
 numSim
 

 setNumSim(pfp, numSim);
 setNumberOptimalPortfolios(pfp, numOpt);
 pfa = getPensionFundAssets(pfp);
  
  if logical(optimizationFlag)  
     
      %Efficient Frontier
      display('Efficient Frontier');
      rmin = retRangeOpt(1);
      rmax = retRangeOpt(2);
      %effFront = getALMEfficientFrontier(pfp, horOpt, rmin, rmax, varInputsStructFieldNames.('optPortCsvFileName'), varInputsStructFieldNames.('effFrontJpgFileName')); not yet implemented 
  
  end	                                   
  
  if logical(projectionFlag)
     
     %Insurance Liabilities Analysis
     tic;
     display('Insurance Liabilities Analysis...');
     %quantDK = projectionReportedInsuranceLiabilitySide(pfp,  varInputsStruct.('DKCsvFileName'), varInputsStruct.('quantDKPlotJpgFileName'));
     %quantCF = projectionCashFlowInsurance(pfp,  varInputsStruct.('CFCsvFileName'), varInputsStruct.('quantCFPlotJpgFileName'));
     %alloILiab = getPieChartReportedInsuranceLiability(pfe,  varInputsStruct.('iLiabAlloCsvFileName'), varInputsStruct.('pieChartILiabJpgFileName'));
     iCf = getExpectedTotalInsuranceCashFlows(pfp, varInputsStruct.('iCfCsvFileName'));
     nICf = getExpectedTotalNonInsuranceCashFlows(pfp, varInputsStruct.('nICfCsvFileName'));
     
     toc;
     
     %Initial Reported Funding Ratio
     tic;
     display('Initial Reported Funding Ratio...');
     initialFundingRatio = getInitialFundingRatio(pfp, varInputsStruct.('initialReportedFundingRatioCsvFileName'));
     toc;
     
     %In Force Asset Strategy
     display('SAA SOLL...');
     %fLevelRes = 1;
     %alphaRes = 0.05;
     %fLevelsShortfall = [0.85, 0.9, 0.95, 1, 1.2];
     
     makeALMOutput(pfp,... 
                   varInputsStruct.('inForceRfrCsvFileName'), varInputsStruct.('inForceRfrQuantJpgFileName'), varInputsStruct.('inForceRfrDistJpgFileName'),...
                   varInputsStruct.('inForceTotalRetCsvFileName'), varInputsStruct.('inForceTotalRetQuantJpgFileName'), varInputsStruct.('inForceTotalRetDistJpgFileName'),...
                   varInputsStruct.('inForceCumTotalRetCsvFileName'), varInputsStruct.('inForceCumTotalRetQuantJpgFileName'), varInputsStruct.('inForceCumTotalRetDistJpgFileName'),...         
                   varInputsStruct.('inForceAlloAssetCsvFileName'), varInputsStruct.('inForceAlloAssetJpgFileName'), varInputsStruct.('inForceAssCfCsvFileName'),...                       
                   fLevelRes, alphaRes, varInputsStruct.('inForceTargetReserveCsvFileName'), varInputsStruct.('inForceCumulatedTargetReserveCsvFileName'),...
                   fLevelsShortfall, varInputsStruct.('inForceProbCsvFileName'),  varInputsStruct.('inForceProbJpgFileName'),...
                   varInputsStruct.('inForceBsCsvFileName'), varInputsStruct.('inForceBsJpgFileName'));
    
 %display('I have just finished the simulation for the inforce strategy!');
 outputs = pfp;
return; %exclude computation alternative strategies
 
     %Alternative Strategies
     display('SAA IST...')
     altStrats = getAlternativeStrategies(pfa);
     namesAltStrats = fieldnames(altStrats);
     numAltStrats = length(namesAltStrats);
     
     for stratnum=1:numAltStrats
         calcAssetMarketStrategy(pfp,altStrats.(namesAltStrats{stratnum}), namesAltStrats{stratnum});
         rfrCsvFileName = fileNameMod(varInputsStruct.('altRfrCsvFileName'), ['_', namesAltStrats{stratnum}]);
         rfrQuantJpgFileName = fileNameMod(varInputsStruct.('altRfrQuantJpgFileName'), ['_', namesAltStrats{stratnum}]);
         rfrDistJpgFileName = fileNameMod(varInputsStruct.('altRfrDistJpgFileName'), ['_', namesAltStrats{stratnum}]);
         totalRetCsvFileName = fileNameMod(varInputsStruct.('altTotalRetCsvFileName'), ['_', namesAltStrats{stratnum}]);
         totalRetQuantJpgFileName = fileNameMod( varInputsStruct.('altTotalRetQuantJpgFileName'), ['_', namesAltStrats{stratnum}]);
         totalRetDistJpgFileName = fileNameMod(varInputsStruct.('altTotalRetDistJpgFileName'), ['_', namesAltStrats{stratnum}]);
         cumTotalRetCsvFileName = fileNameMod( varInputsStruct.('altCumTotalRetCsvFileName'), ['_', namesAltStrats{stratnum}]);
         cumTotalRetQuantJpgFileName = fileNameMod(varInputsStruct.('altCumTotalRetQuantJpgFileName'), ['_', namesAltStrats{stratnum}]);
         cumTotalRetDistJpgFileName = fileNameMod(varInputsStruct.('altCumTotalRetDistJpgFileName'), ['_', namesAltStrats{stratnum}]);
         alloAssetCsvFileName = fileNameMod(varInputsStruct.('altAlloAssetCsvFileName'), ['_', namesAltStrats{stratnum}]);
         pieJpgFileName = fileNameMod(varInputsStruct.('altAlloAssetJpgFileName'), ['_', namesAltStrats{stratnum}]);
         assetCfCsvFileName = fileNameMod(varInputsStruct.('altAssCfCsvFileName'), ['_', namesAltStrats{stratnum}]);
         targetVFRCsvFileName = fileNameMod(varInputsStruct.('altTargetReserveCsvFileName'), ['_', namesAltStrats{stratnum}]);
         cumulatedTargetVFRCsvFileName = fileNameMod(varInputsStruct.('altCumulatedTargetReserveCsvFileName'), ['_', namesAltStrats{stratnum}]);
         alphasCsvFileName = fileNameMod(varInputsStruct.('altProbCsvFileName'), ['_', namesAltStrats{stratnum}]);
         alphasPlotJpgFileName = fileNameMod(varInputsStruct.('altProbJpgFileName'), ['_', namesAltStrats{stratnum}]);
         bsCsvFileName = fileNameMod(varInputsStruct.('altBsCsvFileName'), ['_', namesAltStrats{stratnum}]);
         bsPlotJpgFileName = fileNameMod(varInputsStruct.('altBsJpgFileName'), ['_', namesAltStrats{stratnum}]);
         
     makeALMOutput(pfp,...
                   rfrCsvFileName, rfrQuantJpgFileName, rfrDistJpgFileName,...
                   totalRetCsvFileName, totalRetQuantJpgFileName, totalRetDistJpgFileName,...
                   cumTotalRetCsvFileName, cumTotalRetQuantJpgFileName, cumTotalRetDistJpgFileName,...
                   alloAssetCsvFileName, pieJpgFileName, assetCfCsvFileName,...
                   fLevelRes, alphaRes, targetVFRCsvFileName, cumulatedTargetVFRCsvFileName,...
                   fLevelsShortfall, alphasCsvFileName, alphasPlotJpgFileName,...
                   bsCsvFileName, bsPlotJpgFileName);
     
     end    
     

 
  end




%  outputs = struct();
%  outputs.('Efficient Frontier') = effFront;
%  outputs.('Quantiles Reserves') = quantDK;
%  outputs.('Quantiles Cash Flows') = quantCF;
%  outputs.('Insurance Cash Flows') = iCf;
%  outputs.('Non Insurance Cash Flows') = nICf;
%  outputs.('Reported Liabilities Allocation') = empty(); %method behind has not yet been implemented
%  outputs.('Efficient Frontier') = empty(); %method behind has not yet been implemented
%  outputs.('ALM Output Inforce Strategy') = almOutputInForce;
%  outputs.('ALM Output Inforce Strategy') = almOutputAlternativeStrategies;

    function [assCf, pieChartAsset, statValuesTotalReturnAsset, statValuesCumTotalReturnAsset,...
              statValuesMarketFundingRatio, shortFallProbabilities, targetValueFluctuationsReserves, cumulatedTargetValueFluctuationsReserves] =...
              makeALMOutput(pfp,...
                            rfrCsvFileName, rfrQuantJpgFileName, rfrDistJpgFileName,...
                            totalRetCsvFileName, totalRetQuantJpgFileName, totalRetDistJpgFileName,...
                            cumTotalRetCsvFileName, cumTotalRetQuantJpgFileName, cumTotalRetDistJpgFileName,...
                            alloAssetCsvFileName, alloAssetPieJpgFileName, assetCfCsvFileName,...
                            F, alpha, targetVFRCsvFileName, cumulatedTargetVFRCsvFileName,...
                            fLevels, alphasCsvFileName, alphasPlotJpgFileName,...
                            bsCsvFileName, bsPlotJpgFileName);
                       
                       
      assCf = getAssetCashFlows(pfp, assetCfCsvFileName);
      statValuesMarketFundingRatio = projectionFundingRatio(pfp, rfrCsvFileName, rfrQuantJpgFileName, rfrDistJpgFileName);
      statValuesCumTotalReturnAsset = projectionCumulatedTotalReturnsAssetSide(pfp, cumTotalRetCsvFileName, cumTotalRetQuantJpgFileName, cumTotalRetDistJpgFileName);
      statValuesTotalReturnAsset = projectionTotalReturnsAssetSide(pfp, totalRetCsvFileName, totalRetQuantJpgFileName, totalRetDistJpgFileName);
      pieChartAsset = getPieChartAssetStrategy(pfp, alloAssetCsvFileName, alloAssetPieJpgFileName); 
      targetValueFluctuationsReserves = getTargetValueFluctuationReserves(pfp, alpha, targetVFRCsvFileName);
      cumulatedTargetValueFluctuationsReserves = getCumulatedTargetValueFluctuationReserves(pfp, alpha, cumulatedTargetVFRCsvFileName);
      shortFallProbabilities= projectionDefaultProbabilities(pfp, fLevels, alphasCsvFileName, alphasPlotJpgFileName);
      bs = getBalanceSheetProjection(pfp, bsCsvFileName, bsPlotJpgFileName);
    end   

    function newFileName = fileNameMod(fileName, mod)
      newFileName = [fileName(1:(strfind(fileName, '.')-1)), mod, fileName(strfind(fileName, '.'):end)];  
    end    


end

